// 项目.cpp : 定义应用程序的入口点。
//

#include "stdafx.h"
#include "项目.h"

#define MAX_LOADSTRING 100
#define MAX  40  //棋盘大小
#define CHESS_MAX  40
#define N 5
int g_iState[MAX][MAX] = {0};
int g_iChessNum = 0;//画棋子用数字来表示第几个棋子便于悔棋
// 全局变量: 
HINSTANCE hInst;								// 当前实例
TCHAR szTitle[MAX_LOADSTRING];					// 标题栏文本
TCHAR szWindowClass[MAX_LOADSTRING];			// 主窗口类名

// 此代码模块中包含的函数的前向声明: 
ATOM				MyRegisterClass(HINSTANCE hInstance);
BOOL				InitInstance(HINSTANCE, int);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK	About(HWND, UINT, WPARAM, LPARAM);
void RectChess();
int Checknum(int stat, int x, int y, int xStep, int yStep);
BOOL CheckResult(int x, int y);
void Getlast(int &x, int&y);

int APIENTRY _tWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPTSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

 	// TODO:  在此放置代码。
	MSG msg;
	HACCEL hAccelTable;

	// 初始化全局字符串
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_MY, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// 执行应用程序初始化: 
	if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}

	hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY));

	// 主消息循环: 
	while (GetMessage(&msg, NULL, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return (int) msg.wParam;
}



//
//  函数:  MyRegisterClass()
//
//  目的:  注册窗口类。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_MY);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

//
//   函数:  InitInstance(HINSTANCE, int)
//
//   目的:  保存实例句柄并创建主窗口
//
//   注释: 
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   HWND hWnd;

   hInst = hInstance; // 将实例句柄存储在全局变量中

   hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  函数:  WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目的:    处理主窗口的消息。
//
//  WM_COMMAND	- 处理应用程序菜单
//  WM_PAINT	- 绘制主窗口
//  WM_DESTROY	- 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId, wmEvent;
	PAINTSTRUCT ps;
	HDC hdc;
	static int xSize;
	static int ySize;
	static int xCnt;
	static int yCnt;
	int x;
	int y;
	RECT rect;//获取格子的值

	switch (message)
	{
	case  WM_SIZE: //获取窗口大小，每个矩形的位置
		xSize = LOWORD(lParam); //长
		ySize = HIWORD(lParam);//宽  lParam坐标
		xCnt = xSize / CHESS_MAX;  //算出窗口大小
		if (xCnt > MAX)
		{
			xCnt = MAX;
		}
		yCnt = ySize / CHESS_MAX;
		if (xCnt > MAX)
		{
			xCnt = MAX;
		}
		break;
	case WM_LBUTTONDOWN://鼠标左键，画棋子
		x = LOWORD(lParam) / CHESS_MAX;//计算在那个格子
		y = HIWORD(lParam) / CHESS_MAX;
		//有余数
		if (x < xCnt&&y < yCnt&&!g_iState[x][y])
		{
			//获取格子的值
			g_iState[x][y] = ++g_iChessNum;//加棋子
			rect.left = x*CHESS_MAX;
			rect.right = (x + 1)*CHESS_MAX;
			rect.top = y*CHESS_MAX;
			rect.bottom = (y + 1)*CHESS_MAX;
			//重画棋子，把棋子画上去
			InvalidateRect(hWnd, &rect, FALSE);
			if (CheckResult(x, y))
			{
				if (g_iChessNum % 2)
				{
					MessageBox(NULL, TEXT("黑色棋赢"), TEXT("结束"), MB_OK);
				}
				else
				{
					MessageBox(NULL, TEXT("白色棋赢"), TEXT("结束"), MB_OK);
				}
				//重画棋盘
				RectChess();
				InvalidateRect(hWnd, NULL, FALSE);
			}
		}
		else
		{
			MessageBeep(0);
		}
		break;
	case WM_COMMAND:
		wmId = LOWORD(wParam);// wParam鼠标动作
		wmEvent = HIWORD(wParam);
		// 分析菜单选择: 
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case  ID_START:
			RectChess();
			InvalidateRect(hWnd, NULL, FALSE);
			break;
		case ID_LAST:
			if (g_iChessNum == 0)
			{
				MessageBox(NULL, TEXT("没有棋可悔！"),TEXT("注意"),MB_OK);
				break;
			}
			Getlast(x, y);
			g_iState[x][y] = 0;
			g_iChessNum--;
			rect.left = x*CHESS_MAX;  //重新画棋框
			rect.right = (x + 1)*CHESS_MAX;
			rect.top = y*CHESS_MAX;
			rect.bottom = (y + 1)*CHESS_MAX;
			//重画棋子，把棋子抹去
			InvalidateRect(hWnd, &rect, FALSE);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		// TODO:  在此添加任意绘图代码...
		for (x = 0; x < xCnt; x++)
		{
			for (y = 0; y < yCnt; y++)
			{
				int ibush;
				HBRUSH hbrush = (HBRUSH)GetStockObject(WHITE_BRUSH);
				SelectObject(hdc, hbrush);
				Rectangle(hdc, x*CHESS_MAX, y*CHESS_MAX, (x + 1)*CHESS_MAX, (y + 1)*CHESS_MAX);//画矩形(y + 1)*CHESS_MAX每个边长
				if (g_iState[x][y])
				{
					if (g_iState[x][y]%2)
					{
						ibush = BLACK_BRUSH;
					}
					else
					{
						ibush = GRAY_BRUSH;
					}
					hbrush = (HBRUSH)GetStockObject(ibush);
					SelectObject(hdc, hbrush);

					Ellipse(hdc, x*CHESS_MAX, y*CHESS_MAX, (x + 1)*CHESS_MAX, (y + 1)*CHESS_MAX);//画圆
				}
			}
		}
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}
//判断是否成立  八个方向
//xStep==-1 yStep==0 左
//xStep==0 yStep==1  右
//xStep==1 yStep==1  右下
int Checknum(int stat,int x,int y,int xStep,int yStep)
{
	int iCnt = 0;
	while (true)
	{
		x += xStep;
		y += yStep;
		if (x<0 || y<0 || x>MAX || y>MAX)//是否越界
			break;
		if (g_iState[x][y] == 0)
			break;//没有棋子 退出
		if (g_iState[x][y] % 2 == stat)
			iCnt++;//同棋子
		else
			break;//不同棋子
	}
	return iCnt;
}
BOOL CheckResult(int x, int y)
{
	int iCnt = 0;
	int istart = g_iState[x][y] % 2;
	//横向
	iCnt = Checknum(istart, x, y, -1, 0) + Checknum(istart, x, y, 1, 0) + 1;
	if (iCnt >= N - 1)
		return TRUE;
	//纵向
	iCnt = Checknum(istart, x, y, 0, -1) + Checknum(istart, x, y, 0, 1) + 1;
	if (iCnt >= N - 1)
		return TRUE;
	//斜向 左-右
	iCnt = Checknum(istart, x, y, -1, 1) + Checknum(istart, x, y, 1, -1) + 1;
	if (iCnt >= N - 1)
		return TRUE;
	//斜向 右-左
	iCnt = Checknum(istart, x, y, 1, 1) + Checknum(istart, x, y, -1, -1) + 1;
	if (iCnt >= N - 1)
		return TRUE;
	return FALSE;
}
VOID RectChess()
{
	memset(g_iState, 0, MAX*MAX * 4);
	g_iChessNum = 0;
}
void Getlast(int &x, int&y)
{
	int i;
	int j;
	for (i = 0; i < MAX; i++)
	{
		for (j = 0; j < MAX; j++)
		{
			if (g_iChessNum == g_iState[i][j])
			{
				x = i;
				y = j;
				return;
			}
		}
	}
}
